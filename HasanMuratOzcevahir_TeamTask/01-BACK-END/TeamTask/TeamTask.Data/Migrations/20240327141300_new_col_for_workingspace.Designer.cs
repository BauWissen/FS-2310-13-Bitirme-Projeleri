// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TeamTask.Data.Contexts;

#nullable disable

namespace TeamTask.Data.Migrations
{
    [DbContext(typeof(TeamTaskDBContext))]
    [Migration("20240327141300_new_col_for_workingspace")]
    partial class new_col_for_workingspace
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d",
                            RoleId = "dba5ba2b-7661-47ef-b466-0947a595dd7e"
                        },
                        new
                        {
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d",
                            RoleId = "b66d5a45-dca6-4a42-8329-b18f1eab41d3"
                        },
                        new
                        {
                            UserId = "1c5ff9fb-8377-4cf8-b5e0-1105e2cb94f8",
                            RoleId = "b66d5a45-dca6-4a42-8329-b18f1eab41d3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dba5ba2b-7661-47ef-b466-0947a595dd7e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "b66d5a45-dca6-4a42-8329-b18f1eab41d3",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cee95bee-2eaf-4ba1-8910-379e47362f9d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25febed4-8bcc-46c7-9bf1-e7843635feb8",
                            Email = "muratoz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Murat",
                            LastName = "Öz",
                            LockoutEnabled = false,
                            NormalizedEmail = "MURATOZ@GMAIL.COM",
                            NormalizedUserName = "MURATOZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEMKE9YvWpJahwDAo537kZnaXc3CRPPh54qZ6pT37wqJsKZ0JdpwtNldFc4lT0pNHRw==",
                            PhoneNumber = "5555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6b60960d-733a-45fb-b479-b8de1eba8e9e",
                            TwoFactorEnabled = false,
                            UserName = "muratoz"
                        },
                        new
                        {
                            Id = "1c5ff9fb-8377-4cf8-b5e0-1105e2cb94f8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4f55613f-622c-4054-8a57-8b856141a573",
                            Email = "engin@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Engin",
                            LastName = "Niyazi",
                            LockoutEnabled = false,
                            NormalizedEmail = "ENGIN@GMAIL.COM",
                            NormalizedUserName = "ENGIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAXX1oEJndiqfnU0eiLI1jd3q8ZnFXIysMQky7y9+Ngf1aajXkTNXhusL67hRZ/kZg==",
                            PhoneNumber = "5555555554",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d48171f4-b184-4e61-aa1d-fff692d47e2e",
                            TwoFactorEnabled = false,
                            UserName = "engin"
                        });
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "gray",
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4771),
                            DisplayText = "Başlanmadı",
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4772)
                        },
                        new
                        {
                            Id = 2,
                            Color = "yellow",
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4773),
                            DisplayText = "Sürüyor",
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4773)
                        },
                        new
                        {
                            Id = 3,
                            Color = "green",
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4774),
                            DisplayText = "Bitti",
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4774)
                        });
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4784),
                            EndDate = new DateTime(2024, 3, 28, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4785),
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4784),
                            Priority = 0,
                            Title = "Task 1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4789),
                            EndDate = new DateTime(2024, 3, 29, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4790),
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4790),
                            Priority = 2,
                            Title = "Task 2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4791),
                            EndDate = new DateTime(2024, 3, 30, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4792),
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4791),
                            Priority = 1,
                            Title = "Task 3"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4793),
                            EndDate = new DateTime(2024, 3, 28, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4793),
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4793),
                            Priority = 0,
                            Title = "Task 4"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4794),
                            EndDate = new DateTime(2024, 3, 29, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4795),
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4794),
                            Priority = 1,
                            Title = "Task 5"
                        });
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.TaskStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("StatusId", "TaskId");

                    b.HasIndex("TaskId")
                        .IsUnique();

                    b.ToTable("TaskStatuses");

                    b.HasData(
                        new
                        {
                            StatusId = 1,
                            TaskId = 1
                        },
                        new
                        {
                            StatusId = 2,
                            TaskId = 2
                        },
                        new
                        {
                            StatusId = 1,
                            TaskId = 3
                        },
                        new
                        {
                            StatusId = 3,
                            TaskId = 4
                        },
                        new
                        {
                            StatusId = 3,
                            TaskId = 5
                        });
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.TaskUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskUsers");

                    b.HasData(
                        new
                        {
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d",
                            TaskId = 1
                        },
                        new
                        {
                            UserId = "1c5ff9fb-8377-4cf8-b5e0-1105e2cb94f8",
                            TaskId = 2
                        },
                        new
                        {
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d",
                            TaskId = 3
                        },
                        new
                        {
                            UserId = "1c5ff9fb-8377-4cf8-b5e0-1105e2cb94f8",
                            TaskId = 4
                        },
                        new
                        {
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d",
                            TaskId = 5
                        });
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.WorkingSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("WorkingSpaces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#ff0000",
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4470),
                            Description = "Benim çalışma alanım 1 harika bir çalışma alanı!",
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4482),
                            Title = "Benim çalışma alanım 1",
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d"
                        },
                        new
                        {
                            Id = 2,
                            Color = "#00ff00",
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4488),
                            Description = "Benim çalışma alanım 2 harika bir çalışma alanı!",
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4489),
                            Title = "Benim çalışma alanım 2",
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d"
                        });
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.WorkingSpaceComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("WorkingSpaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkingSpaceId");

                    b.ToTable("WorkingSpaceComments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Harika bir çalışma alanı",
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4714),
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4714),
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d",
                            WorkingSpaceId = 1
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Güzel bir çalışma olacak",
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4744),
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4744),
                            UserId = "1c5ff9fb-8377-4cf8-b5e0-1105e2cb94f8",
                            WorkingSpaceId = 2
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Tekrar yorum yaptım",
                            CreatedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4746),
                            ModifiedDate = new DateTime(2024, 3, 27, 17, 13, 0, 539, DateTimeKind.Local).AddTicks(4746),
                            UserId = "cee95bee-2eaf-4ba1-8910-379e47362f9d",
                            WorkingSpaceId = 1
                        });
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.WorkingSpaceTask", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WorkingSpaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TaskId", "WorkingSpaceId");

                    b.HasIndex("WorkingSpaceId");

                    b.ToTable("WorkingSpaceTasks");

                    b.HasData(
                        new
                        {
                            TaskId = 1,
                            WorkingSpaceId = 1
                        },
                        new
                        {
                            TaskId = 2,
                            WorkingSpaceId = 2
                        },
                        new
                        {
                            TaskId = 3,
                            WorkingSpaceId = 1
                        },
                        new
                        {
                            TaskId = 4,
                            WorkingSpaceId = 2
                        },
                        new
                        {
                            TaskId = 5,
                            WorkingSpaceId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamTask.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.TaskStatus", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamTask.Entity.Concrete.Task", "Task")
                        .WithOne("TaskStatus")
                        .HasForeignKey("TeamTask.Entity.Concrete.TaskStatus", "TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.TaskUser", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Task", "Task")
                        .WithMany("TaskUsers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamTask.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.WorkingSpaceComment", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamTask.Entity.Concrete.WorkingSpace", null)
                        .WithMany("Comments")
                        .HasForeignKey("WorkingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.WorkingSpaceTask", b =>
                {
                    b.HasOne("TeamTask.Entity.Concrete.Task", "Task")
                        .WithMany("WorkingSpaceTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamTask.Entity.Concrete.WorkingSpace", "WorkingSpace")
                        .WithMany("WorkingSpaceTasks")
                        .HasForeignKey("WorkingSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("WorkingSpace");
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.Task", b =>
                {
                    b.Navigation("TaskStatus")
                        .IsRequired();

                    b.Navigation("TaskUsers");

                    b.Navigation("WorkingSpaceTasks");
                });

            modelBuilder.Entity("TeamTask.Entity.Concrete.WorkingSpace", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("WorkingSpaceTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
